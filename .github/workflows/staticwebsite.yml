name: web

on: 
  push:
    paths:
      - 'web-demo/**'

jobs:
  terraform:
    runs-on: self-hosted

    name: 'web'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      WORKING_DIR: ./web-demo

    steps:
      - uses: actions/checkout@v3

      - name: 'Get last commit message'
        id: get_commit_message
        shell: pwsh  # Specify PowerShell as the shell
        run: |
          # Use Git to get the last commit message and write it to a file
          git log -n 1 --pretty=format:'%s' > commit_message.txt
          # Set the commit message as an environment variable
          echo "COMMIT_MESSAGE=$(Get-Content commit_message.txt)" > $GITHUB_ENV
          echo "Last commit message: $(Get-Content commit_message.txt)"  # Print for debugging

      - name: 'Terraform init'
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform plan'
        id: plan
        run: terraform plan
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Conditionally run terraform action'
        shell: pwsh  # Use PowerShell
        run: |
          # Retrieve the commit message from the environment variable
          $commitMessage = $env:GITHUB_ENV

          # Print the commit message for debugging
          Write-Host "Commit Message: '$commitMessage'"

          # Check if the commit message contains "destroy"
          if ($commitMessage -like "*destroy*") {
            Write-Host "Executing terraform destroy..."
            terraform destroy -auto-approve
          } else {
            Write-Host "Executing terraform apply..."
            terraform apply -auto-approve
          }
        working-directory: ${{ env.WORKING_DIR }}
